1:1-1:1::RedBlackTree.$trModule :: "GHC.Types.Module"
10:1-10:9::RedBlackTree.isMember :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\na -> (RedBlackTree.RBTree a) -> GHC.Types.Bool"
10:19-10:24::GHC.Types.False :: "{v : GHC.Types.Bool | not v\n                      && v == False}"
12:5-12:6::ds_d173r :: "a"
12:9-12:12::val :: "{VV : a | VV == val##a16Xc}"
12:15-12:30::RedBlackTree.isMember :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\na -> (RedBlackTree.RBTree a) -> GHC.Types.Bool"
12:24-12:25::ds_d173r :: "a"
12:26-12:30::left :: "{v : (RedBlackTree.RBTree a) | v == left##a16Xb}"
13:5-13:6::ds_d173r :: "a"
13:10-13:13::val :: "{VV : a | VV == val##a16Xc}"
13:16-13:20::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
14:5-14:6::ds_d173r :: "a"
14:9-14:12::val :: "{VV : a | VV == val##a16Xc}"
14:15-14:31::RedBlackTree.isMember :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\na -> (RedBlackTree.RBTree a) -> GHC.Types.Bool"
14:24-14:25::ds_d173r :: "a"
14:26-14:31::right :: "{v : (RedBlackTree.RBTree a) | v == right##a16Xd}"
15:17-15:22::GHC.Types.False :: "{v : GHC.Types.Bool | not v\n                      && v == False}"
18:1-18:14::RedBlackTree.okasakiInsert :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\na -> (RedBlackTree.RBTree a) -> (RedBlackTree.RBTree a)"
18:15-18:16::x :: "a"
18:17-18:21::tree :: "(RedBlackTree.RBTree a)"
18:24-18:44::makeBlack :: "{VV : forall a .\n      (RedBlackTree.RBTree a) -> (RedBlackTree.RBTree a) | VV == makeBlack##a16Xh}"
18:34-18:44::lq_anf$##7205759403793059139 :: "(RedBlackTree.RBTree a)"
18:39-18:43::tree :: "{v : (RedBlackTree.RBTree a) | v == tree##a16Xf}"
20:5-20:8::ins :: "(RedBlackTree.RBTree a) -> (RedBlackTree.RBTree a)"
20:16-20:36::lq_anf$##7205759403793059128 :: "(RedBlackTree.RBTree a)"
20:21-20:24::RedBlackTree.Red :: "{v : RedBlackTree.Color | v == Red}"
20:25-20:29::_ :: "{VV : forall a . (RedBlackTree.RBTree a) | VV == Leaf}"
20:30-20:31::x :: "{VV : a | VV == x##a16Xe}"
20:32-20:36::_ :: "{VV : forall a . (RedBlackTree.RBTree a) | VV == Leaf}"
22:9-22:10::x :: "{VV : a | VV == x##a16Xe}"
22:13-22:16::val :: "{VV : a | VV == val##a16Xk}"
22:19-22:53::RedBlackTree.balance :: "{VV : forall a .\n      RedBlackTree.Color -> (RedBlackTree.RBTree a) -> a -> (RedBlackTree.RBTree a) -> (RedBlackTree.RBTree a) | VV == balance}"
22:27-22:32::color :: "{v : RedBlackTree.Color | v == color##a16Xi}"
22:33-22:43::lq_anf$##7205759403793059138 :: "(RedBlackTree.RBTree a)"
22:38-22:42::left :: "{v : (RedBlackTree.RBTree a) | v == left##a16Xj}"
22:44-22:47::val :: "{VV : a | VV == val##a16Xk}"
22:48-22:53::right :: "{v : (RedBlackTree.RBTree a) | v == right##a16Xl}"
23:9-23:10::x :: "{VV : a | VV == x##a16Xe}"
23:14-23:17::val :: "{VV : a | VV == val##a16Xk}"
23:20-23:45::RedBlackTree.Node :: "{VV : forall a .\n      RedBlackTree.Color -> (RedBlackTree.RBTree a) -> a -> (RedBlackTree.RBTree a) -> (RedBlackTree.RBTree a) | VV == Node}"
23:25-23:30::color :: "{v : RedBlackTree.Color | v == color##a16Xi}"
23:31-23:35::left :: "{v : (RedBlackTree.RBTree a) | v == left##a16Xj}"
23:36-23:39::val :: "{VV : a | VV == val##a16Xk}"
23:40-23:45::right :: "{v : (RedBlackTree.RBTree a) | v == right##a16Xl}"
24:9-24:10::x :: "{VV : a | VV == x##a16Xe}"
24:13-24:16::val :: "{VV : a | VV == val##a16Xk}"
24:19-24:53::RedBlackTree.balance :: "{VV : forall a .\n      RedBlackTree.Color -> (RedBlackTree.RBTree a) -> a -> (RedBlackTree.RBTree a) -> (RedBlackTree.RBTree a) | VV == balance}"
24:27-24:32::color :: "{v : RedBlackTree.Color | v == color##a16Xi}"
24:33-24:37::left :: "{v : (RedBlackTree.RBTree a) | v == left##a16Xj}"
24:38-24:41::val :: "{VV : a | VV == val##a16Xk}"
24:42-24:53::lq_anf$##7205759403793059137 :: "(RedBlackTree.RBTree a)"
24:47-24:52::right :: "{v : (RedBlackTree.RBTree a) | v == right##a16Xl}"
25:21-25:47::$dIP_a171q :: "{v : (GHC.Classes.IP [GHC.Types.Char] GHC.Internal.Stack.Types.CallStack) | v == $dIP_a171q}"
25:27-25:47::lq_anf$##7205759403793059136 :: "[GHC.Types.Char]"
26:5-26:14::makeBlack :: "forall a . (RedBlackTree.RBTree a) -> (RedBlackTree.RBTree a)"
26:41-26:66::RedBlackTree.Node :: "{VV : forall a .\n      RedBlackTree.Color -> (RedBlackTree.RBTree a) -> a -> (RedBlackTree.RBTree a) -> (RedBlackTree.RBTree a) | VV == Node}"
26:46-26:51::RedBlackTree.Black :: "{v : RedBlackTree.Color | v == Black}"
26:52-26:56::left :: "{v : (RedBlackTree.RBTree a) | v == left##a16Xm}"
26:57-26:60::val :: "{VV : a | VV == val##a16Xn}"
26:61-26:66::right :: "{v : (RedBlackTree.RBTree a) | v == right##a16Xo}"
28:1-28:8::RedBlackTree.balance :: "forall a .\nRedBlackTree.Color -> (RedBlackTree.RBTree a) -> a -> (RedBlackTree.RBTree a) -> (RedBlackTree.RBTree a)"
28:65-28:69::val3 :: "a"
28:70-28:75::node4 :: "(RedBlackTree.RBTree a)"
28:78-28:151::RedBlackTree.Node :: "{VV : forall a .\n      RedBlackTree.Color -> (RedBlackTree.RBTree a) -> a -> (RedBlackTree.RBTree a) -> (RedBlackTree.RBTree a) | VV == Node}"
28:83-28:86::RedBlackTree.Red :: "{v : RedBlackTree.Color | v == Red}"
28:87-28:116::lq_anf$##7205759403793059101 :: "(RedBlackTree.RBTree a)"
28:93-28:98::RedBlackTree.Black :: "{v : RedBlackTree.Color | v == Black}"
28:99-28:104::node1 :: "{v : (RedBlackTree.RBTree a) | v == node1##a16Xp}"
28:105-28:109::val1 :: "{VV : a | VV == val1##a16Xq}"
28:110-28:115::node2 :: "{v : (RedBlackTree.RBTree a) | v == node2##a16Xr}"
28:117-28:121::val2 :: "{VV : a | VV == val2##a16Xs}"
28:122-28:151::lq_anf$##7205759403793059102 :: "(RedBlackTree.RBTree a)"
28:128-28:133::RedBlackTree.Black :: "{v : RedBlackTree.Color | v == Black}"
28:134-28:139::node3 :: "{v : (RedBlackTree.RBTree a) | v == node3##a16Xt}"
28:140-28:144::val3 :: "{VV : a | VV == val3##a16Xu}"
28:145-28:150::node4 :: "{v : (RedBlackTree.RBTree a) | v == node4##a16Xv}"